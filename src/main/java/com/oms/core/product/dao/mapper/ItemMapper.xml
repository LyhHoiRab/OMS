<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oms.core.product.dao.mapper.ItemMapper">

    <sql id="CONDITION_SQL">
        <if test="params != null">
            <include refid="WHERE_SQL"/>

            <if test="params.groupBy != null and !params.groupBy.isEmpty">
                <include refid="GROUP_BY_SQL"/>
            </if>

            <if test="params.having != null">
                <include refid="HAVING_SQL"/>
            </if>

            <if test="params.orderBy != null and !params.orderBy.isEmpty">
                <include refid="ORDER_BY_SQL"/>
            </if>

            <if test="params.limit != null">
                <include refid="LIMIT_SQL"/>
            </if>
        </if>
    </sql>

    <sql id="WHERE_SQL">
        <where>
            <if test="params.andCriterion != null and !params.andCriterion.isEmpty">
                <foreach collection="params.andCriterion" item="criterion">
                    <trim prefix="AND (" suffix=")">
                        <include refid="CRITERION_SQL"/>
                    </trim>
                </foreach>
            </if>
            <if test="params.orCriterion != null and params.orCriterion.isEmpty">
                <foreach collection="params.orCriterion" item="criterion">
                    <trim prefix="OR (" suffix=")">
                        <include refid="CRITERION_SQL"/>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <sql id="CRITERION_SQL">
        <choose>
            <when test="criterion.noValue">
                ${criterion.property} ${criterion.operator}
            </when>
            <when test="criterion.singleValue">
                ${criterion.property} ${criterion.operator} #{criterion.value}
            </when>
            <when test="criterion.betweenValue">
                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
            </when>
            <when test="criterion.listValue">
                ${criterion.property} ${criterion.operator}
                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </when>
            <when test="criterion.andCriterionValue">
                <foreach collection="criterion.value" item="item" open="(" close=")" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
            <when test="criterion.orCriterionValue">
                <foreach collection="criterion.value" item="item" open="(" close=")" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
        </choose>
    </sql>

    <sql id="GROUP_BY_SQL">
        GROUP BY
        <foreach collection="params.groupBy" item="item" separator=",">
            ${item.property}
        </foreach>
    </sql>

    <sql id="HAVING_SQL">
        HAVING
        <choose>
            <when test="params.having.noValue">
                ${params.having.property} ${params.having.operator}
            </when>
            <when test="params.having.singleValue">
                ${params.having.property} ${params.having.operator} #{params.having.value}
            </when>
            <when test="params.having.betweenValue">
                ${params.having.property} ${params.having.operator} #{params.having.value} AND #{params.having.secondValue}
            </when>
            <when test="params.having.listValue">
                ${params.having.property} ${params.having.operator}
                <foreach collection="params.having.value" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </when>
            <when test="params.having.andCriterionValue">
                <foreach collection="params.having.value" item="item" open="(" close=")" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
            <when test="params.having.orCriterionValue">
                <foreach collection="params.having.value" item="item" open="(" close=")" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
        </choose>
    </sql>

    <sql id="ORDER_BY_SQL">
        ORDER BY
        <foreach collection="params.orderBy" item="item" separator=",">
            ${item.property} ${item.operator}
        </foreach>
    </sql>

    <sql id="LIMIT_SQL">
        ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
    </sql>

    <resultMap id="item" type="com.oms.core.product.entity.Item">
        <id    column="id"           property="id"         javaType="java.lang.String"/>
        <result column="code"        property="code"       javaType="java.lang.String"/>
        <result column="name"        property="name"       javaType="java.lang.String"/>
        <result column="sales"       property="sales"      javaType="java.lang.Integer"/>
        <result column="stock"       property="stock"      javaType="java.lang.Integer"/>
        <result column="is_check"    property="isCheck"    javaType="java.lang.Boolean"/>
        <result column="create_time" property="createTime" javaType="java.util.Date"/>
        <result column="update_time" property="updateTime" javaType="java.util.Date"/>

        <association property="product" resultMap="product" columnPrefix="p_"/>
    </resultMap>

    <resultMap id="product" type="com.oms.core.product.entity.Product">
        <id     column="id"            property="id"            javaType="java.lang.String"/>
        <result column="code"          property="code"          javaType="java.lang.String"/>
        <result column="number"        property="number"        javaType="java.lang.String"/>
        <result column="name"          property="name"          javaType="java.lang.String"/>
        <result column="type"          property="type"          typeHandler="ProductTypeHandler"/>
    </resultMap>

    <insert id="saveList">
        INSERT
          INTO item (
               id,
               code,
               name,
               sales,
               stock,
               is_check,
               create_time
        ) VALUES
      <foreach collection="list" item="item" separator=",">
        (
                #{item.id,         jdbcType=VARCHAR},
                #{item.code,       jdbcType=VARCHAR},
                #{item.name,       jdbcType=VARCHAR},
                #{item.sales,      jdbcType=INTEGER},
                #{item.stock,      jdbcType=INTEGER},
                #{item.isCheck,    jdbcType=BOOLEAN},
                #{item.createTime, jdbcType=TIMESTAMP}
        )
      </foreach>
    </insert>

    <update id="updateList">
        <foreach collection="list" item="item" separator=";">
            UPDATE item
             <set>
                 <if test="item.name != null">
                     name = #{item.name, jdbcType=VARCHAR},
                 </if>
                 <if test="item.sales != null">
                     sales = #{item.sales, jdbcType=INTEGER},
                 </if>
                 <if test="item.stock != null">
                     stock = #{item.stock, jdbcType=INTEGER},
                 </if>
                 <if test="item.isCheck != null">
                     is_check = #{item.isCheck, jdbcType=BOOLEAN},
                 </if>
                 <if test="item.updateTime != null">
                     update_time = #{item.updateTime, jdbcType=TIMESTAMP},
                 </if>
             </set>
              WHERE code = #{item.code}
        </foreach>
    </update>

    <update id="update">
        UPDATE item
         <set>
            <if test="name != null">
                name = #{name, jdbcType=VARCHAR},
            </if>
            <if test="sales != null">
                sales = #{sales, jdbcType=INTEGER},
            </if>
            <if test="stock != null">
                stock = #{stock, jdbcType=INTEGER},
            </if>
            <if test="isCheck != null">
                is_check = #{isCheck, jdbcType=BOOLEAN},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime, jdbcType=TIMESTAMP},
            </if>
         </set>
          WHERE id = #{id}
    </update>

    <update id="updateIsCheck">
        UPDATE item
           SET is_check    = #{isCheck},
               update_time = NOW()
         WHERE id IN
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <select id="get" resultMap="item">
        SELECT *
          FROM item
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>

    <select id="find" resultMap="item">
        SELECT *
          FROM item
        <include refid="CONDITION_SQL"/>
    </select>

    <select id="count" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM item
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>

    <select id="findWithProduct" resultMap="item">
        SELECT i.*,
               p.id     AS p_id,
               p.code   AS p_code,
               p.number AS p_number,
               p.name   AS p_name,
               p.type   AS p_type
          FROM item i
     LEFT JOIN product p
            ON p.code = i.code
        <include refid="CONDITION_SQL"/>
    </select>

    <select id="countWithProduct" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM item i
     LEFT JOIN product p
            ON p.code = i.code
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>
</mapper>