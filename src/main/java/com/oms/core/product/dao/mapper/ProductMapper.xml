<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oms.core.product.dao.mapper.ProductMapper">

    <sql id="CONDITION_SQL">
        <if test="params != null">
            <include refid="WHERE_SQL"/>

            <if test="params.groupBy != null and !params.groupBy.isEmpty">
                <include refid="GROUP_BY_SQL"/>
            </if>

            <if test="params.having != null">
                <include refid="HAVING_SQL"/>
            </if>

            <if test="params.orderBy != null and !params.orderBy.isEmpty">
                <include refid="ORDER_BY_SQL"/>
            </if>

            <if test="params.limit != null">
                <include refid="LIMIT_SQL"/>
            </if>
        </if>
    </sql>

    <sql id="WHERE_SQL">
        <where>
            <if test="params.andCriterion != null and !params.andCriterion.isEmpty">
                <foreach collection="params.andCriterion" item="criterion">
                    <trim prefix="AND (" suffix=")">
                        <include refid="CRITERION_SQL"/>
                    </trim>
                </foreach>
            </if>
            <if test="params.orCriterion != null and params.orCriterion.isEmpty">
                <foreach collection="params.orCriterion" item="criterion">
                    <trim prefix="OR (" suffix=")">
                        <include refid="CRITERION_SQL"/>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <sql id="CRITERION_SQL">
        <choose>
            <when test="criterion.noValue">
                ${criterion.property} ${criterion.operator}
            </when>
            <when test="criterion.singleValue">
                ${criterion.property} ${criterion.operator} #{criterion.value}
            </when>
            <when test="criterion.betweenValue">
                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
            </when>
            <when test="criterion.listValue">
                ${criterion.property} ${criterion.operator}
                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </when>
            <when test="criterion.andCriterionValue">
                <foreach collection="criterion.value" item="item" open="(" close=")" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
            <when test="criterion.orCriterionValue">
                <foreach collection="criterion.value" item="item" open="(" close=")" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
        </choose>
    </sql>

    <sql id="GROUP_BY_SQL">
        GROUP BY
        <foreach collection="params.groupBy" item="item" separator=",">
            ${item.property}
        </foreach>
    </sql>

    <sql id="HAVING_SQL">
        HAVING
        <choose>
            <when test="params.having.noValue">
                ${params.having.property} ${params.having.operator}
            </when>
            <when test="params.having.singleValue">
                ${params.having.property} ${params.having.operator} #{params.having.value}
            </when>
            <when test="params.having.betweenValue">
                ${params.having.property} ${params.having.operator} #{params.having.value} AND #{params.having.secondValue}
            </when>
            <when test="params.having.listValue">
                ${params.having.property} ${params.having.operator}
                <foreach collection="params.having.value" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </when>
            <when test="params.having.andCriterionValue">
                <foreach collection="params.having.value" item="item" open="(" close=")" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
            <when test="params.having.orCriterionValue">
                <foreach collection="params.having.value" item="item" open="(" close=")" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
        </choose>
    </sql>

    <sql id="ORDER_BY_SQL">
        ORDER BY
        <foreach collection="params.orderBy" item="item" separator=",">
            ${item.property} ${item.operator}
        </foreach>
    </sql>

    <sql id="LIMIT_SQL">
        ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
    </sql>

    <resultMap id="product" type="com.oms.core.product.entity.Product">
        <id     column="id"            property="id"            javaType="java.lang.String"/>
        <result column="code"          property="code"          javaType="java.lang.String"/>
        <result column="number"        property="number"        javaType="java.lang.String"/>
        <result column="name"          property="name"          javaType="java.lang.String"/>
        <result column="customized"    property="customized"    typeHandler="CustomizedHandler"/>
        <result column="type"          property="type"          typeHandler="ProductTypeHandler"/>
        <result column="texture"       property="texture"       javaType="java.lang.String"/>
        <result column="specification" property="specification" javaType="java.lang.String"/>
        <result column="price"         property="price"         javaType="java.lang.Double"/>
        <result column="description"   property="description"   javaType="java.lang.String"/>
        <result column="effect"        property="effect"        javaType="java.lang.String"/>
        <result column="sfda"          property="sfda"          javaType="java.lang.String"/>
        <result column="certificates"  property="certificates"  javaType="java.lang.String"/>
        <result column="thumbnail"     property="thumbnail"     javaType="java.lang.String"/>
        <result column="create_time"   property="createTime"    javaType="java.util.Date"/>
        <result column="update_time"   property="updateTime"    javaType="java.util.Date"/>
    </resultMap>

    <insert id="save">
        INSERT
          INTO product (
               id,
               code,
               number,
               name,
               customized,
               type,
               texture,
               specification,
               price,
               explain,
               effect,
               sfda,
               certificates,
               thumbnail,
               create_time
        ) VALUE (
               #{id,            jdbcType=VARCHAR},
               #{code,          jdbcType=VARCHAR},
               #{number,        jdbcType=VARCHAR},
               #{name,          jdbcType=VARCHAR},
               #{customized,    typeHandler=CustomizedHandler},
               #{type,          typeHandler=ProductTypeHandler},
               #{texture,       jdbcType=VARCHAR},
               #{specification, jdbcType=VARCHAR},
               #{price,         jdbcType=DOUBLE},
               #{explain,       jdbcType=VARCHAR},
               #{effect,        jdbcType=VARCHAR},
               #{sfda,          jdbcType=VARCHAR},
               #{certificates,  jdbcType=VARCHAR},
               #{thumbnail,     jdbcType=VARCHAR},
               #{createTime,    jdbcType=TIMESTAMP}
        )
    </insert>

    <update id="update">
        UPDATE product
         <set>
             <if test="number != null">
                 number = #{number, jdbcType=VARCHAR},
             </if>
             <if test="name != null">
                 name = #{name, jdbcType=VARCHAR},
             </if>
             <if test="customized != null">
                 customized = #{customized, typeHandler=CustomizedHandler},
             </if>
             <if test="type != null">
                 type = #{type, typeHandler=ProductTypeHandler},
             </if>
             <if test="texture != null">
                 texture = #{texture, jdbcType=VARCHAR},
             </if>
             <if test="specification != null">
                 specification = #{specification, jdbcType=VARCHAR},
             </if>
             <if test="price != null">
                 price = #{price, jdbcType=DOUBLE},
             </if>
             <if test="description != null">
                 description = #{description, jdbcType=VARCHAR},
             </if>
             <if test="effect != null">
                 effect = #{effect, jdbcType=VARCHAR},
             </if>
             <if test="sfda != null">
                 sfda = #{sfda, jdbcType=VARCHAR},
             </if>
             <if test="certificates != null">
                 certificates = #{certificates, jdbcType=VARCHAR},
             </if>
             <if test="thumbnail != null">
                 thumbnail = #{thumbnail, jdbcType=VARCHAR},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=TIMESTAMP},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <insert id="saveList">
        INSERT
          INTO product (
               id,
               code,
               number,
               name,
               customized,
               type,
               texture,
               specification,
               price,
               description,
               effect,
               sfda,
               certificates,
               thumbnail,
               create_time
        ) VALUES
      <foreach collection="list" item="product" separator=",">
        (
                #{product.id,            jdbcType=VARCHAR},
                #{product.code,          jdbcType=VARCHAR},
                #{product.number,        jdbcType=VARCHAR},
                #{product.name,          jdbcType=VARCHAR},
                #{product.customized,    typeHandler=CustomizedHandler},
                #{product.type,          typeHandler=ProductTypeHandler},
                #{product.texture,       jdbcType=VARCHAR},
                #{product.specification, jdbcType=VARCHAR},
                #{product.price,         jdbcType=DOUBLE},
                #{product.description,   jdbcType=VARCHAR},
                #{product.effect,        jdbcType=VARCHAR},
                #{product.sfda,          jdbcType=VARCHAR},
                #{product.certificates,  jdbcType=VARCHAR},
                #{product.thumbnail,     jdbcType=VARCHAR},
                #{product.createTime,    jdbcType=TIMESTAMP}
        )
      </foreach>
    </insert>

    <select id="get" resultMap="product">
        SELECT *
          FROM prodcut
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>

    <select id="find" resultMap="product">
        SELECT *
          FROM product
        <include refid="CONDITION_SQL"/>
    </select>

    <select id="count" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM product
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>
</mapper>