<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oms.core.permission.dao.mapper.RoleMapper">

    <sql id="CONDITION_SQL">
        <if test="params != null">
            <include refid="WHERE_SQL"/>

            <if test="params.groupBy != null and !params.groupBy.isEmpty">
                <include refid="GROUP_BY_SQL"/>
            </if>

            <if test="params.having != null">
                <include refid="HAVING_SQL"/>
            </if>

            <if test="params.orderBy != null and !params.orderBy.isEmpty">
                <include refid="ORDER_BY_SQL"/>
            </if>

            <if test="params.limit != null">
                <include refid="LIMIT_SQL"/>
            </if>
        </if>
    </sql>

    <sql id="WHERE_SQL">
        <where>
            <if test="params.andCriterion != null and !params.andCriterion.isEmpty">
                <foreach collection="params.andCriterion" item="criterion">
                    <trim prefix="AND (" suffix=")">
                        <include refid="CRITERION_SQL"/>
                    </trim>
                </foreach>
            </if>
            <if test="params.orCriterion != null and params.orCriterion.isEmpty">
                <foreach collection="params.orCriterion" item="criterion">
                    <trim prefix="OR (" suffix=")">
                        <include refid="CRITERION_SQL"/>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <sql id="CRITERION_SQL">
        <choose>
            <when test="criterion.noValue">
                ${criterion.property} ${criterion.operator}
            </when>
            <when test="criterion.singleValue">
                ${criterion.property} ${criterion.operator} #{criterion.value}
            </when>
            <when test="criterion.betweenValue">
                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
            </when>
            <when test="criterion.listValue">
                ${criterion.property} ${criterion.operator}
                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </when>
            <when test="criterion.andCriterionValue">
                <foreach collection="criterion.value" item="item" open="(" close=")" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
            <when test="criterion.orCriterionValue">
                <foreach collection="criterion.value" item="item" open="(" close=")" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
        </choose>
    </sql>

    <sql id="GROUP_BY_SQL">
        GROUP BY
        <foreach collection="params.groupBy" item="item" separator=",">
            ${item.property}
        </foreach>
    </sql>

    <sql id="HAVING_SQL">
        HAVING
        <choose>
            <when test="params.having.noValue">
                ${params.having.property} ${params.having.operator}
            </when>
            <when test="params.having.singleValue">
                ${params.having.property} ${params.having.operator} #{params.having.value}
            </when>
            <when test="params.having.betweenValue">
                ${params.having.property} ${params.having.operator} #{params.having.value} AND #{params.having.secondValue}
            </when>
            <when test="params.having.listValue">
                ${params.having.property} ${params.having.operator}
                <foreach collection="params.having.value" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </when>
            <when test="params.having.andCriterionValue">
                <foreach collection="params.having.value" item="item" open="(" close=")" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
            <when test="params.having.orCriterionValue">
                <foreach collection="params.having.value" item="item" open="(" close=")" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
        </choose>
    </sql>

    <sql id="ORDER_BY_SQL">
        ORDER BY
        <foreach collection="params.orderBy" item="item" separator=",">
            ${item.property} ${item.operator}
        </foreach>
    </sql>

    <sql id="LIMIT_SQL">
        ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
    </sql>

    <resultMap id="role" type="com.oms.core.permission.entity.Role">
        <id     column="id"          property="id"         javaType="java.lang.String"/>
        <result column="name"        property="name"       javaType="java.lang.String"/>
        <result column="is_system"   property="isSystem"   javaType="java.lang.Boolean"/>
        <result column="status"      property="status"     typeHandler="UsingStatusHandler"/>
        <result column="create_time" property="createTime" javaType="java.util.Date"/>
        <result column="update_time" property="updateTime" javaType="java.util.Date"/>

        <association property="functions" resultMap="function" columnPrefix="f_"/>
    </resultMap>

    <resultMap id="function" type="com.oms.core.permission.entity.Function">
        <id     column="id"          property="id"          javaType="java.lang.String"/>
        <result column="api"         property="api"         javaType="java.lang.String"/>
        <result column="method"      property="method"      javaType="java.lang.String"/>
        <result column="description" property="description" javaType="java.lang.String"/>
    </resultMap>

    <insert id="save">
        INSERT
          INTO role (
               id,
               name,
               is_system,
               status,
               create_time
        ) VALUE (
               #{id,         jdbcType=VARCHAR},
               #{name,       jdbcType=VARCHAR},
               #{isSystem,   jdbcType=VARCHAR},
               #{status,     typeHandler=UsingStatusHandler},
               #{createTime, jdbcType=TIMESTAMP}
        )
    </insert>

    <update id="update">
        UPDATE role
         <set>
             <if test="name != null">
                 name = #{name, jdbcType=VARCHAR},
             </if>
             <if test="status != null">
                 status = #{status, typeHandler=UsingStatusHandler},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=TIMESTAMP},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <insert id="grant">
        INSERT
          INTO role_function (
               role_id,
               function_id
        ) VALUES
      <foreach collection="functionIds" item="functionId" separator=",">
        (
                #{roleId,     jdbcType=VARCHAR},
                #{functionId, jdbcType=VARCHAR}
        )
      </foreach>
    </insert>

    <delete id="revoke">
        DELETE
          FROM role_function
         WHERE role_id = #{roleId}
    </delete>

    <select id="get" resultMap="role">
        SELECT *
          FROM role
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>

    <select id="find" resultMap="role">
        SELECT *
          FROM role
        <include refid="CONDITION_SQL"/>
    </select>

    <select id="count" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM role
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>

    <select id="findByAccountId" resultMap="role">
        SELECT r.*
          FROM role r,
               role_account ra
         WHERE r.id = ra.role_id
           AND ra.account_id = #{accountId}
           AND r.status      = TRUE
    </select>

    <select id="findWithFunctions" resultMap="role">
        SELECT r.*,
               f.id          AS f_id,
               f.api         AS f_api,
               f.method      AS f_method,
               f.description AS f_description
          FROM role r
     LEFT JOIN role_function rf
            ON rf.role_id = r.id
     LEFT JOIN function f
            ON rf.function_id = f.id
        <include refid="CONDITION_SQL"/>
    </select>
</mapper>
