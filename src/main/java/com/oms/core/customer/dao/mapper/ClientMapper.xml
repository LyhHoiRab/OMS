<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oms.core.customer.dao.mapper.ClientMapper">

    <sql id="CONDITION_SQL">
        <if test="params != null">
            <include refid="WHERE_SQL"/>

            <if test="params.groupBy != null and !params.groupBy.isEmpty">
                <include refid="GROUP_BY_SQL"/>
            </if>

            <if test="params.having != null">
                <include refid="HAVING_SQL"/>
            </if>

            <if test="params.orderBy != null and !params.orderBy.isEmpty">
                <include refid="ORDER_BY_SQL"/>
            </if>

            <if test="params.limit != null">
                <include refid="LIMIT_SQL"/>
            </if>
        </if>
    </sql>

    <sql id="WHERE_SQL">
        <where>
            <if test="params.andCriterion != null and !params.andCriterion.isEmpty">
                <foreach collection="params.andCriterion" item="criterion">
                    <trim prefix="AND (" suffix=")">
                        <include refid="CRITERION_SQL"/>
                    </trim>
                </foreach>
            </if>
            <if test="params.orCriterion != null and params.orCriterion.isEmpty">
                <foreach collection="params.orCriterion" item="criterion">
                    <trim prefix="OR (" suffix=")">
                        <include refid="CRITERION_SQL"/>
                    </trim>
                </foreach>
            </if>
        </where>
    </sql>

    <sql id="CRITERION_SQL">
        <choose>
            <when test="criterion.noValue">
                ${criterion.property} ${criterion.operator}
            </when>
            <when test="criterion.singleValue">
                ${criterion.property} ${criterion.operator} #{criterion.value}
            </when>
            <when test="criterion.betweenValue">
                ${criterion.property} ${criterion.operator} #{criterion.value} AND #{criterion.secondValue}
            </when>
            <when test="criterion.listValue">
                ${criterion.property} ${criterion.operator}
                <foreach collection="criterion.value" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </when>
            <when test="criterion.andCriterionValue">
                <foreach collection="criterion.value" item="item" open="(" close=")" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
            <when test="criterion.orCriterionValue">
                <foreach collection="criterion.value" item="item" open="(" close=")" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
        </choose>
    </sql>

    <sql id="GROUP_BY_SQL">
        GROUP BY
        <foreach collection="params.groupBy" item="item" separator=",">
            ${item.property}
        </foreach>
    </sql>

    <sql id="HAVING_SQL">
        HAVING
        <choose>
            <when test="params.having.noValue">
                ${params.having.property} ${params.having.operator}
            </when>
            <when test="params.having.singleValue">
                ${params.having.property} ${params.having.operator} #{params.having.value}
            </when>
            <when test="params.having.betweenValue">
                ${params.having.property} ${params.having.operator} #{params.having.value} AND #{params.having.secondValue}
            </when>
            <when test="params.having.listValue">
                ${params.having.property} ${params.having.operator}
                <foreach collection="params.having.value" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </when>
            <when test="params.having.andCriterionValue">
                <foreach collection="params.having.value" item="item" open="(" close=")" separator="AND">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
            <when test="params.having.orCriterionValue">
                <foreach collection="params.having.value" item="item" open="(" close=")" separator="OR">
                    <trim prefix="(" suffix=")">
                        <choose>
                            <when test="item.noValue">
                                ${item.property} ${item.operator}
                            </when>
                            <when test="item.singleValue">
                                ${item.property} ${item.operator} #{item.value}
                            </when>
                            <when test="item.betweenValue">
                                ${item.property} ${item.operator} #{item.value} AND #{item.secondValue}
                            </when>
                            <when test="item.listValue">
                                ${item.property} ${item.operator}
                                <foreach collection="item.value" item="itemValue" open="(" close=")" separator=",">
                                    #{itemValue}
                                </foreach>
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </when>
        </choose>
    </sql>

    <sql id="ORDER_BY_SQL">
        ORDER BY
        <foreach collection="params.orderBy" item="item" separator=",">
            ${item.property} ${item.operator}
        </foreach>
    </sql>

    <sql id="LIMIT_SQL">
        ${params.limit.operator} ${params.limit.value}, ${params.limit.secondValue}
    </sql>

    <resultMap id="client" type="com.oms.core.customer.entity.Client">
        <id     column="id"          property="id"         javaType="java.lang.String"/>
        <result column="account_id"  property="accountId"  javaType="java.lang.String"/>
        <result column="name"        property="name"       javaType="java.lang.String"/>
        <result column="wxno"        property="wxno"       javaType="java.lang.String"/>
        <result column="sex"         property="sex"        typeHandler="SexHandler"/>
        <result column="head_img"    property="headImg"    javaType="java.lang.String"/>
        <result column="remark"      property="remark"     javaType="java.lang.String"/>
        <result column="create_time" property="createTime" javaType="java.util.Date"/>
        <result column="update_time" property="updateTime" javaType="java.util.Date"/>
    </resultMap>

    <insert id="save">
        INSERT
          INTO client (
               id,
               account_id,
               name,
               wxno,
               sex,
               head_img,
               remark,
               create_time
        ) VALUE (
               #{id,         jdbcType=VARCHAR},
               #{accountId,  jdbcType=VARCHAR},
               #{name,       jdbcType=VARCHAR},
               #{wxno,       jdbcType=VARCHAR},
               #{sex,        typeHandler=SexHandler},
               #{headImg,    jdbcType=VARCHAR},
               #{remark,     jdbcType=VARCHAR},
               #{createTime, jdbcType=TIMESTAMP}
        )
    </insert>

    <update id="update">
        UPDATE client
         <set>
             <if test="name != null">
                 name = #{name, jdbcType=VARCHAR},
             </if>
             <if test="wxno != null">
                 wxno = #{wxno, jdbcType=VARCHAR},
             </if>
             <if test="sex != null">
                 sex = #{sex, typeHandler=SexHandler},
             </if>
             <if test="headImg != null">
                 head_img = #{headImg, jdbcType=VARCHAR},
             </if>
             <if test="remark != null">
                 remark = #{remark, jdbcType=VARCHAR},
             </if>
             <if test="updateTime != null">
                 update_time = #{updateTime, jdbcType=TIMESTAMP},
             </if>
         </set>
          WHERE id = #{id}
    </update>

    <select id="get" resultMap="client">
        SELECT *
          FROM client
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>

    <select id="find" resultMap="client">
        SELECT *
          FROM client
        <include refid="CONDITION_SQL"/>
    </select>

    <select id="count" resultType="java.lang.Long">
        SELECT COUNT(*)
          FROM client
        <if test="params != null">
            <include refid="WHERE_SQL"/>
        </if>
    </select>
</mapper>